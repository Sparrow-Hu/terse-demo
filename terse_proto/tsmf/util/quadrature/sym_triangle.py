'''
Created on 2013-1-16

@author: Man YUAN <epsilonyuan@gmail.com>
'''

import numpy as np
from terse_proto.tsmf.util.quadrature import QuadraturePoint

class SymTriangleQuadrature(object):
    MAX_POWER = 8
    MIN_POWER = 1
    numPts = [1, 3, 4, 6, 7, 12, 13, 16]
    weights = (
        np.array((1,), dtype=np.double),
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0), dtype=np.double),
        np.array((-27 / 48.0, 25 / 48.0, 25 / 48.0, 25 / 48.0), dtype=np.double),
        np.array((0.109951743655322, 0.109951743655322, 0.109951743655322, 0.223381589678011, 0.223381589678011, 0.223381589678011), dtype=np.double),
        np.array((0.225000000000000, 0.125939180544827, 0.125939180544827, 0.125939180544827, 0.132394152788506, 0.132394152788506, 0.132394152788506), dtype=np.double),
        np.array((0.050844906370207, 0.050844906370207, 0.050844906370207, 0.116786275726379, 0.116786275726379, 0.116786275726379, 0.082851075618374, 0.082851075618374, 0.082851075618374, 0.082851075618374, 0.082851075618374, 0.082851075618374), dtype=np.double),
        np.array((-0.149570044467682, 0.175615257433208, 0.175615257433208, 0.175615257433208, 0.053347235608838, 0.053347235608838, 0.053347235608838, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257, 0.077113760890257), dtype=np.double),
        np.array((0.144315607677787, 0.095091634267285, 0.095091634267285, 0.095091634267285, 0.103217370534718, 0.103217370534718, 0.103217370534718, 0.032458497623198, 0.032458497623198, 0.032458497623198, 0.027230314174435, 0.027230314174435, 0.027230314174435, 0.027230314174435, 0.027230314174435, 0.027230314174435), dtype=np.double))
    _barycentricCoordinates = (
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0), dtype=np.double),
        np.array((2 / 3.0, 1 / 6.0, 1 / 6.0,
                  1 / 6.0, 2 / 3.0, 1 / 6.0,
                  1 / 6.0, 1 / 6.0, 2 / 3.0), dtype=np.double),
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0,
                  0.6, 0.2, 0.2,
                  0.2, 0.6, 0.2,
                  0.2, 0.2, 0.6), dtype=np.double),
        np.array((0.816847572980459, 0.091576213509771, 0.091576213509771,
                  0.091576213509771, 0.816847572980459, 0.091576213509771,
                  0.091576213509771, 0.091576213509771, 0.816847572980459,
                  0.108103018168070, 0.445948490915965, 0.445948490915965,
                  0.445948490915965, 0.108103018168070, 0.445948490915965,
                  0.445948490915965, 0.445948490915965, 0.108103018168070), dtype=np.double),
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0, 0.797426985353087,
                  0.101286507323456, 0.101286507323456, 0.101286507323456,
                  0.797426985353087, 0.101286507323456, 0.101286507323456,
                  0.101286507323456, 0.797426985353087, 0.059715871789770,
                  0.470142064105115, 0.470142064105115, 0.470142064105115,
                  0.059715871789770, 0.470142064105115, 0.470142064105115,
                  0.470142064105115, 0.059715871789770), dtype=np.double),
        np.array((0.873821971016996, 0.063089014491502, 0.063089014491502,
                  0.063089014491502, 0.873821971016996, 0.063089014491502,
                  0.063089014491502, 0.063089014491502, 0.873821971016996,
                  0.501426509658179, 0.249286745170910, 0.249286745170910,
                  0.249286745170910, 0.501426509658179, 0.249286745170910,
                  0.249286745170910, 0.249286745170910, 0.501426509658179,
                  0.636502499121399, 0.310352451033784, 0.053145049844817,
                  0.636502499121399, 0.053145049844817, 0.310352451033784,
                  0.310352451033784, 0.636502499121399, 0.053145049844817,
                  0.310352451033784, 0.053145049844817, 0.636502499121399,
                  0.053145049844817, 0.636502499121399, 0.310352451033784,
                  0.053145049844817, 0.310352451033784, 0.636502499121399), dtype=np.double),
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0,
            0.479308067841920, 0.260345966079040, 0.260345966079040,
            0.260345966079040, 0.479308067841920, 0.260345966079040,
            0.260345966079040, 0.260345966079040, 0.479308067841920,
            0.869739794195568, 0.065130102902216, 0.065130102902216,
            0.065130102902216, 0.869739794195568, 0.065130102902216,
            0.065130102902216, 0.065130102902216, 0.869739794195568,
            0.638444188569810, 0.312865496004874, 0.048690315425316,
            0.638444188569810, 0.048690315425316, 0.312865496004874,
            0.312865496004874, 0.638444188569810, 0.048690315425316,
            0.312865496004874, 0.048690315425316, 0.638444188569810,
            0.048690315425316, 0.638444188569810, 0.312865496004874,
            0.048690315425316, 0.312865496004874, 0.638444188569810), dtype=np.double),
        np.array((1 / 3.0, 1 / 3.0, 1 / 3.0,
            0.081414823414554, 0.459292588292723, 0.459292588292723,
            0.459292588292723, 0.081414823414554, 0.459292588292723,
            0.459292588292723, 0.459292588292723, 0.081414823414554,
            0.658861384496480, 0.170569307751760, 0.170569307751760,
            0.170569307751760, 0.658861384496480, 0.170569307751760,
            0.170569307751760, 0.170569307751760, 0.658861384496480,
            0.898905543365938, 0.050547228317031, 0.050547228317031,
            0.050547228317031, 0.898905543365938, 0.050547228317031,
            0.050547228317031, 0.050547228317031, 0.898905543365938,
            0.008394777409958, 0.263112829634638, 0.728492392955404,
            0.008394777409958, 0.728492392955404, 0.263112829634638,
            0.263112829634638, 0.008394777409958, 0.728492392955404,
            0.263112829634638, 0.728492392955404, 0.008394777409958,
            0.728492392955404, 0.008394777409958, 0.263112829634638,
            0.728492392955404, 0.263112829634638, 0.008394777409958), dtype=np.double))
    
    @classmethod
    def numPoints(cls, power):
        return cls.numPts[power - 1]
    
    @classmethod
    def barycentricCoordinates(cls, power):
        return np.copy(cls._barycentricCoordinates[power - 1])
    
    @classmethod
    def cartesianCoordinate(cls, x1, y1, x2, y2, x3, y3, power, index, results=None):
        coords = cls._barycentricCoordinates[power - 1];
        if None is results:
            results = np.ndarray((2,), dtype=np.double)
        results[0] = coords[index * 3] * x1 + coords[index * 3 + 1] * x2 + coords[index * 3 + 2] * x3
        results[1] = coords[index * 3] * y1 + coords[index * 3 + 1] * y2 + coords[index * 3 + 2] * y3
        return results
    
    @classmethod
    def getWeight(cls, power, index):
        return cls.weights[power - 1][index]
    
    def quadrate(self, func):
        result = 0.0
        for qp in self:
            result += qp.weight * func.value(qp.coord)
        return result
    
    def __init__(self, x1=None, y1=None, x2=None, y2=None, x3=None, y3=None, power=None):
        self.set_triangle(x1, y1, x2, y2, x3, y3)
        self.power = power
        
    def set_triangle(self, x1, y1, x2, y2, x3, y3):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3
    
    def set_power(self, power):
        self.power = power
    
    def __iter__(self):
        return _QuadIterator(self.x1, self.y1, self.x2, self.y2, self.x3, self.y3, self.power)

class _QuadIterator(object):
    def next(self):
        if self.next_index >= self.size:
            raise StopIteration()
        result = QuadraturePoint()
        result.weight = self.area * SymTriangleQuadrature.getWeight(self.power, self.next_index)
        SymTriangleQuadrature.cartesianCoordinate(self.x1, self.y1, self.x2, self.y2, self.x3, self.y3, self.power, self.next_index, result.coord)
        self.next_index += 1
        return result
    def __init__(self, x1, y1, x2, y2, x3, y3, power):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3
        self.power = power
        self.next_index = 0
        self.size = SymTriangleQuadrature.numPoints(power)
        self.area = 0.5 * np.cross((x2 - x1, y2 - y1), (x3 - x1, y3 - y1))
